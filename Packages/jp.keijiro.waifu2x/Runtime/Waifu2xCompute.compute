#pragma kernel Preprocess
#pragma kernel Postprocess

#define TILE_SIZE 128
#define PADDING 14
#define INPUT_TENSOR_SIZE (TILE_SIZE + PADDING * 2)

Texture2D<float3> _SourceTexture;
RWBuffer<float> _InputTensor;
uint2 _InputOffset;

[numthreads(INPUT_TENSOR_SIZE, 1, 1)]
void Preprocess(uint3 id : SV_DispatchThreadID)
{
    const uint y = id.x;
    uint offs = INPUT_TENSOR_SIZE * (INPUT_TENSOR_SIZE - 1 - y) * 3;
    for (uint x = 0; x < INPUT_TENSOR_SIZE; x++)
    {
        float3 rgb = _SourceTexture[uint2(x, y) + _InputOffset - PADDING];
        _InputTensor[offs++] = rgb.r;
        _InputTensor[offs++] = rgb.g;
        _InputTensor[offs++] = rgb.b;
    }
}

Texture2D<float3> _OutputTensor;
RWTexture2D<float4> _OutputTexture;
uint2 _OutputOffset;

[numthreads(TILE_SIZE * 2, 1, 1)]
void Postprocess(uint3 id : SV_DispatchThreadID)
{
    const uint y = id.x;
    for (uint x = 0; x < TILE_SIZE * 2; x++)
    {
        uint2 tile_pos = uint2(x + PADDING, y + PADDING);
        uint2 out_pos = _OutputOffset + uint2(x, y);
        _OutputTexture[out_pos] = float4(_OutputTensor[tile_pos], 1);
    }
}
